@use "sass:math";
@use "sass:map";
@use "sass:string";

//-----------------------------------------------------------------------------
//  T I N T E R   S H A D E R
//
//	An advanced map getter function used to fetch specific values from a
//	nested map variable.
//
//  Usage:  `#{property}: tint(#{color}, #{percentage})` or
//          `#{property}: tint(#{color}, #{percentage})`
//

// @function tint($color, $percentage) {
//   @return mix(white, $color, $percentage);
// }

// @function shade($color, $percentage) {
//   @return mix(black, $color, $percentage);
// }

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//  C O L O R   S H A D E
//

// @function color-shade($type, $key, $shades: $color-shades) {
//   @return nested-map-get($shades, $type, $key);
// }

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//  C O L O R   F U N C T I O N S
//

// @function primary-color($key: 500) {
//   @return color-shade(primary, $key);
// }

// @function secondary-color($key: 500) {
//   @return color-shade(secondary, $key);
// }

// @function success-color($key: 500) {
//   @return color-shade(success, $key);
// }

// @function danger-color($key: 500) {
//   @return color-shade(danger, $key);
// }

// @function warning-color($key: 500) {
//   @return color-shade(warning, $key);
// }

// @function gray($key: 100) {
//   @return color-shade(gray, $key);
// }

// @function brand-color($key: 500) {
//   @return color-shade(brand, $key);
// }

// @function colorize($name, $key: 500) {
//   @if $name == primary {
//     @return color-shade(primary, $key);
//   } @else if $name == secondary {
//     @return color-shade(secondary, $key);
//   } @else if $name == info {
//     @return color-shade(info, $key);
//   } @else if $name == success {
//     @return color-shade(success, $key);
//   } @else if $name == warning {
//     @return color-shade(warning, $key);
//   } @else if $name == danger {
//     @return color-shade(danger, $key);
//   } @else if $name == gray {
//     @return color-shade(gray, $key);
//   } @else if $name == brand {
//     @return color-shade(brand, $key);
//   } @else {
//     @return color-shade(gray, $key);
//   }
// }

@function theme-color($key: primary, $map: $theme-colors) {
  @return map.get($map, $key);
}

// @function gray($key: base) {
//   @return map-get($theme-colors, #{"gray-" + $key});
// }

// @function primary($key: base) {
//   @return map-get($theme-colors, #{"primary-" + $key});
// }

@function colorize($name, $key: base) {
  @if $name == primary {
    @return theme-color(#{"primary-" + $key});
  } @else if $name == secondary {
    @return theme-color(#{"secondary-" + $key});
  } @else if $name == info {
    @return theme-color(#{"info-" + $key});
  } @else if $name == success {
    @return theme-color(#{"success-" + $key});
  } @else if $name == warning {
    @return theme-color(#{"warning-" + $key});
  } @else if $name == danger {
    @return theme-color(#{"danger-" + $key});
  } @else if $name == gray {
    @return theme-color(#{"gray-" + $key});
  } @else if $name == brand {
    @return theme-color(#{"brand-" + $key});
  } @else {
    @return theme-color(#{"gray-" + $key});
  }
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//  C O L O R   Y I Q
//
@function color-yiq($color) {
  $r: red($color);
  $g: green($color);
  $b: blue($color);

  $yiq: math.div((($r * 299) + ($g * 587) + ($b * 114)), 1000);
  $yiq-contrasted-threshold: 150;
  @if ($yiq >= $yiq-contrasted-threshold) {
    @return colorize("gray", 100);
  } @else {
    @return colorize("gray", 10);
  }
}

//-----------------------------------------------------------------------------
